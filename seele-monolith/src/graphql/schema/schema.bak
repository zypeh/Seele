import { mergeSchemas } from 'graphql-tools'

export default mergeSchemas({
    schemas: []
})

const a = `
    type Error 
    type UserReponse {
        success: Boolean
        info: String

        name: String
        username: String
        avatar: String
        gender: String
    }

    type UserOwnerResponse {
        success: Boolean
        info: String

        name: String
        username: String
        email: String
        avatar: String
        gender: String
        phone: String
    }

    type UnitResponse {
        success: Boolean
        info: String

        unitId: String
        name: String
        type: String
        description: String

        currency: String
        pricing: Float

        addr_zip: String
        addr_street: String
        addr_city: String
        addr_state: String
        addr_country: String

        published: Boolean
    }

    type File {
        id: String!
        name: String!
        type: String!
        size: Int!
        path: String!
    }

    input Upload {
        name: String!
        type: String!
        size: Int!
        path: String!
    }

    type AuthPayload {
        token: String!
        refreshToken: String!
    }

    enum AuthResponse {
        AuthPayload

    }
    type Query {
        unit(unitId: String!): UnitResponse
        unitDashboard(
            unitId: String!,
            token: String!
        ): UnitOwnerResponse
    }

    type Mutation {
        register(username: String!, email: String!): Boolean!
        login(id: String!): Boolean!
        refreshToken: AuthPayload

        createUnit(
            name: String!,
            type: String!
        ): Unit

        updateUnit(
            unitId: String!
            name: String
            description: String
    
            currency: String
            pricing: Float
    
            addr_zip: String
            addr_street: String
            addr_city: String
            addr_state: String
            addr_country: String
        ): Unit

        listUnit(
            unitId: String!,
            token: String!
        ):  Boolean!

        publishUnit(
            bookId: Int!,
            token: String!
        ): Boolean!

    }

    schema {
        query: Query
        mutation: Mutation
    }
`